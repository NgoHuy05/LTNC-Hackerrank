#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

ideal:
// 1 ham check thuan nghich
// 1ham goi de quy de check xem sau khi loai bo ki tu do thi chuoi con lai co phai la thuan nghich hay ko 
// neu co thi in ra vi tri do luon
// neu ko thi chay tiep code xuong duoi thucc hien


int isPalindrome(const string& s, int l, int r) {
    while (l <= r) {
        if (s[l] != s[r]) {
            return 0;
        }
        l++;
        r--;
    }
    return 1;
}

int palindromeIndex(string s) {
    int l = 0, r = s.size()-1;
    while (l <= r) {
        if (s[l] != s[r]) {  
          if (isPalindrome(s, l+1, r)) {
               return l;
        }
          else if (isPalindrome(s, l, r-1)) {
                return r;
            }
            else return -1;
        }
        l++;r--;
    }
   
    return -1;
}
int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string q_temp;
    getline(cin, q_temp);

    int q = stoi(ltrim(rtrim(q_temp)));

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string s;
        getline(cin, s);

        int result = palindromeIndex(s);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
